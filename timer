//first part - shift or count

module top_module (
    input clk,
    input shift_ena,
    input count_ena,
    input data,
    output [3:0] q);
	
    always @(posedge clk) begin
        if(shift_ena) q <= {q[2:0], data};
        if(count_ena)  q <= q - 1;
    end
	
    
endmodule

//second part - find 1101 seq
module top_module (
    input clk,
    input reset,      // Synchronous reset
    input data,
    output start_shifting);

    parameter A = 0, B = 1, C = 2 , D = 3, E = 4;
    reg [2:0] state, next_state;
    
    always @(*) begin
        case(state)
            A: next_state = data ? B : A;
            B: next_state = data ? C : A;
            C: next_state = data ? C : D;
            D: next_state = data ? E : A;
            E: next_state = E;
            default next_state = E;
        endcase
       
    end
    
    always @(posedge clk) begin
        if(reset) state <= A;          
		else state <= next_state;        
    end
    
assign start_shifting = (state == E);
    
endmodule

//part 3 - 4 counter
module top_module (
    input clk,
    input reset,      // Synchronous reset
    output shift_ena);

    reg [1:0] count;
    reg state, next_state;
    parameter A = 0, B =1;
    always @(*) begin
        case(state)
            A: next_state = reset ? B : A;
            B: next_state = (count == 3) ? A : B;
            default next_state = A;
        endcase
    end
    always @(posedge clk) begin
		state <= next_state;
        if(shift_ena) count <= count + 1;
        else count <= 0;
    end
    assign shift_ena = (state == B);
    
endmodule


//part 4 - total FSM
module top_module (
    input clk,
    input reset,      // Synchronous reset
    input data,
    output shift_ena,
    output counting,
    input done_counting,
    output done,
    input ack );

    parameter S = 0, S1 = 1, S11 = 2 , S110 = 3, A = 4, B = 5, C = 6, D = 7, COUNT = 8, FINISH = 9;
    reg [4:0] state, next_state;
   

    
    always @(*) begin
        case(state)
            S: next_state = data ? S1 : S;
            S1: next_state = data ? S11 : S;
            S11: next_state = data ? S11 : S110;
            S110: next_state = data ? A : S;
            A: next_state = B;
            B: next_state = C;
            C: next_state = D;
            D: next_state = COUNT;
            COUNT: next_state = done_counting ? FINISH : COUNT;
            FINISH: next_state = ack ? S : FINISH;
            default next_state = S;
        endcase      
    end
    
    always @(posedge clk) begin
        if(reset) state <= S;          
		else state <= next_state;
        if(next_state == A) shift_ena <= 1;
        else if (state == D) shift_ena <= 0;
    end
    

assign counting = (state == COUNT);
assign done = (state == FINISH);
    
endmodule



